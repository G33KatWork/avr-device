# This is probably good for ATtiny20x, ATtiny40x, ATtiny21x, ATtiny41x
# It may not be enough for Attiny8xx, ATtiny16xx, or ATtinyx2x

TCB0:
  CTRLB:
    _modify:
      # 'async' is reserved
      ASYNC:
        name: "TCB_ASYNC"

# Split this in 2 for ease of use
TWI0:
  SADDR:
    _add:
      # FIXME: Make this so we don't need 'unsafe'
      ADDR:
        description: "Client Address"
        bitRange: "[7:1]"
        access: read-write
      GCE:
        description: "General Call Recognition Enable Bit"
        bitRange: "[0:0]"
        access: read-write

USERROW:
  _modify:
    "USERROW*":
      description: "User Row Bytes"
  _array:
    "USERROW*": {}

GPIO:
  _modify:
    "GPIO*":
      description: "General Purpose IO Registers"
  _array:
    "GPIO*": {}

SIGROW:
  _modify:
    "DEVICEID*":
      description: "Device IO Bytes"
    "SERNUM*":
      description: "Serial Number Bytes"
    "TEMPSENSE0":
      description: "Temperature Sensor Calibration: Gain/Slope"
    "TEMPSENSE1":
      description: "Temperature Sensor Calibration: Offset"
  _array:
    "DEVICEID*": {}
    "SERNUM*": {}

# All FUSEs are read-only from the CPU (can only be modified with UPDI)
FUSE:
  _modify:
    "*":
      access: read-only

PORT[A-Z]:
  _modify:
    # 'in' is reserved
    IN:
      name: INPUT

  DIR:
    "?~P*":
      # Make all Pins use the same enum
      _replace_enum:
        Input: [0, "Input"]
        Output: [1, "Output"]

  # make PINxCTRL a rust slice
  _array:
    "PIN?CTRL": {}

SPI*:
  CTRLA:
    PRESC:
      _replace_enum:
        CLK_PER_4_2:
          [0, "Peripheral clock / 4 if CLK2X == 0 else Peripheral clock / 2"]
        CLK_PER_16_8:
          [1, "Peripheral clock / 16 if CLK2X == 0 else Peripheral clock / 8"]
        CLK_PER_64_32:
          [2, "Peripheral clock / 64 if CLK2X == 0 else Peripheral clock / 32"]
        CLK_PER_128_64:
          [3, "Peripheral clock / 128 if CLK2X == 0 else Peripheral clock / 64"]

    DORD:
      # Make it an enum
      _replace_enum:
        MsbFirst: [0, "Most significant byte first"]
        LsbFirst: [1, "Least significant byte first"]

"USART*":
  STATUS:
    _modify:
      # The RXSIF bit is actually writable to clear the flag
      RXSIF:
        access: read-write
      # The WFB bit is write-only
      WFB:
        access: write-only

CPUINT:
  CTRLA:
    IVSEL:
      _replace_enum:
        AFTERBOOT: [0, "Interrupt vectors are placed after the BOOT section of the Flash"]
        INBOOT: [1, "Interrupt vectors are placed at the start of the BOOT section of the Flash"]
    CVT:
      _replace_enum:
        NORMAL: [0, "Compact Vector Table function is disabled"]
        COMPACT: [1, "Compact Vector Table function is enabled"]
    LVL0RR:
      _replace_enum:
        FIXED: [0, "Priority is fixed for priority level 0 interrupt requests: The lowest interrupt vector address has the highest priority."]
        ROUNDROBIN: [1, "The round robin priority scheme is enabled for priority level 0 interrupt requests"]

CCL:
  _cluster:
    "LUT%s":
      description: "CCL LUT configuration cluster"
      "LUT?CTRLA": {}
      "LUT?CTRLB": {}
      "LUT?CTRLC": {}
      "TRUTH?": {}

  # turn all SEQCTRL-registers into slices
  _array:
    "SEQCTRL?": {}

TCB*:
  _add:
    # FIXME: no idea how to add a write constraint with range [0x0, 0xFF] to
    #        added registers to prevent bits() from being marked as unsafe
    CCMPL:
      description: Lower Compare or Capture in 8-bit PWM mode
      addressOffset: 0x0C
      access: read-write
      size: 8
    CCMPH:
      description: Upper Compare or Capture in 8-bit PWM mode
      addressOffset: 0x0D
      access: read-write
      size: 8

CRCSCAN:
  CTRLB:
    SRC:
      _replace_enum:
        FLASH: [0, "CRC on entire flash"]
        BOOTAPP: [1, "CRC on boot and appl section of flash"]
        BOOT: [2, "CRC on boot section of flash"]
    MODE:
      _replace_enum:
        PRIORITY: [0, "Priority to flash"]

NVMCTRL:
  CTRLA:
    CMD:
      _replace_enum:
        NONE: [0, "No command"]
        WP: [1, "Write page"]
        ER: [2, "Erase page"]
        ERWP: [3, "Erase and write page"]
        PBC: [4, "Page buffer clear"]
        CHER: [5, "Chip erase"]
        EEER: [6, "EEPROM erase"]
        WFU: [7, "Write fuse (PDI only)"]

SLPCTRL:
  CTRLA:
    SMODE:
      _replace_enum:
        IDLE: [0, "Idle mode"]
        STANDBY: [1, "Standby Mode"]
        PDOWN: [2, "Power-down Mode"]
